# tests/scm/config/security/test_vulnerability_protection_profile.py

# Standard library imports
from unittest.mock import MagicMock

# External libraries
import pytest
from requests.exceptions import HTTPError

# Local SDK imports
from scm.config.security import VulnerabilityProtectionProfile
from scm.exceptions import (
    InvalidObjectError,
    ObjectNotPresentError,
    MalformedCommandError,
    MissingQueryParameterError,
    ReferenceNotZeroError,
    APIError,
    BadRequestError,
)
from scm.models.security.vulnerability_protection_profiles import (
    VulnerabilityProfileResponseModel,
    VulnerabilityProfileSeverity,
    VulnerabilityProfileCategory,
    VulnerabilityProfileHost,
    VulnerabilityProfilePacketCapture,
)
from tests.factories import (
    VulnerabilityProfileCreateApiFactory,
    VulnerabilityProfileUpdateApiFactory,
    VulnerabilityProfileResponseFactory,
    VulnerabilityProfileRuleModelFactory,
    VulnerabilityProfileThreatExceptionModelFactory,
)
from tests.utils import raise_mock_http_error


@pytest.mark.usefixtures("load_env")
class TestVulnerabilityProtectionProfileBase:
    """Base class for Vulnerability Protection Profile tests."""

    @pytest.fixture(autouse=True)
    def setup_method(self, mock_scm):
        """Setup method that runs before each test."""
        self.mock_scm = mock_scm  # noqa
        self.mock_scm.get = MagicMock()
        self.mock_scm.post = MagicMock()
        self.mock_scm.put = MagicMock()
        self.mock_scm.delete = MagicMock()
        self.client = VulnerabilityProtectionProfile(self.mock_scm)  # noqa


# -------------------- Test Classes Grouped by Functionality --------------------


class TestVulnerabilityProtectionProfileList(TestVulnerabilityProtectionProfileBase):
    """Tests for listing Vulnerability Protection Profile objects."""

    def test_list_valid(self):
        """Test listing all objects successfully."""
        mock_response = {
            "data": [
                VulnerabilityProfileResponseFactory(
                    name="profile1",
                    folder="Shared",
                    rules=[VulnerabilityProfileRuleModelFactory()],
                ).model_dump(),
                VulnerabilityProfileResponseFactory(
                    name="profile2",
                    folder="Shared",
                    rules=[VulnerabilityProfileRuleModelFactory()],
                ).model_dump(),
            ],
            "offset": 0,
            "total": 2,
            "limit": 200,
        }

        self.mock_scm.get.return_value = mock_response  # noqa
        existing_objects = self.client.list(folder="Shared")

        self.mock_scm.get.assert_called_once_with(  # noqa
            "/config/security/v1/vulnerability-protection-profiles",
            params={
                "limit": 10000,
                "folder": "Shared",
            },
        )
        assert isinstance(existing_objects, list)
        assert isinstance(existing_objects[0], VulnerabilityProfileResponseModel)
        assert len(existing_objects) == 2
        assert existing_objects[0].name == "profile1"

    def test_list_folder_empty_error(self):
        """Test that an empty folder raises appropriate error."""
        with pytest.raises(MissingQueryParameterError) as exc_info:
            self.client.list(folder="")

        error_msg = str(exc_info.value)
        assert (
            "['\"folder\" is not allowed to be empty'] - HTTP error: 400 - API error: E003"
            in error_msg
        )

    def test_list_folder_nonexistent_error(self):
        """Test error handling in list operation."""
        self.mock_scm.get.side_effect = raise_mock_http_error(  # noqa
            status_code=404,
            error_code="API_I00013",
            message="Listing failed",
            error_type="Operation Impossible",
        )

        with pytest.raises(ObjectNotPresentError) as exc_info:
            self.client.list(folder="NonexistentFolder")

        error_msg = str(exc_info.value)
        assert (
            "{'errorType': 'Operation Impossible'} - HTTP error: 404 - API error: API_I00013"
            in error_msg
        )

    def test_list_container_missing_error(self):
        """Test that InvalidObjectError is raised when no container parameter is provided."""
        with pytest.raises(InvalidObjectError) as exc_info:
            self.client.list()

        error_msg = str(exc_info.value)
        assert "HTTP error: 400 - API error: E003" in error_msg

    def test_list_container_multiple_error(self):
        """Test validation of container parameters."""
        with pytest.raises(InvalidObjectError) as exc_info:
            self.client.list(folder="folder1", snippet="snippet1")

        error_msg = str(exc_info.value)
        assert "HTTP error: 400 - API error: E003" in error_msg

    def test_list_filters_valid(self):
        """Test that filters are properly added to parameters."""
        filters = {
            "severity": ["critical", "high"],
        }

        mock_response = {"data": []}
        self.mock_scm.get.return_value = mock_response  # noqa

        self.client.list(folder="Shared", **filters)

        self.mock_scm.get.assert_called_once_with(  # noqa
            "/config/security/v1/vulnerability-protection-profiles",
            params={
                "limit": 10000,
                "folder": "Shared",
            },
        )

    def test_list_filters_lists_empty(self):
        """Test behavior with empty filter lists."""
        mock_response = {
            "data": [
                VulnerabilityProfileResponseFactory(
                    name="profile1",
                    folder="Shared",
                    rules=[VulnerabilityProfileRuleModelFactory()],
                ).model_dump()
            ]
        }
        self.mock_scm.get.return_value = mock_response  # noqa

        filtered_objects = self.client.list(
            folder="Shared",
            severity=[],
        )
        assert len(filtered_objects) == 0

    def test_list_filters_types(self):
        """Test validation of filter types in list method."""
        # Mock response for successful case
        mock_response = {
            "data": [
                VulnerabilityProfileResponseFactory(
                    name="profile1",
                    folder="Shared",
                    rules=[VulnerabilityProfileRuleModelFactory()],
                ).model_dump()
            ]
        }

        # Test invalid severity filter (string instead of list)
        self.mock_scm.get.side_effect = raise_mock_http_error(  # noqa
            status_code=400,
            error_code="E003",
            message="'severity' filter must be a list",
            error_type="Invalid Query Parameter",
        )
        with pytest.raises(BadRequestError) as exc_info:
            self.client.list(folder="Shared", severity="critical")
        assert (
            "{'errorType': 'Invalid Query Parameter'} - HTTP error: 400 - API error: E003"
            in str(exc_info.value)
        )

        # Reset side effect for successful case
        self.mock_scm.get.side_effect = None  # noqa
        self.mock_scm.get.return_value = mock_response  # noqa

        # Test that valid list filters pass validation
        try:
            self.client.list(
                folder="Shared",
                severity=["critical"],
            )
        except BadRequestError:
            pytest.fail("Unexpected BadRequestError raised with valid list filters")

    def test_list_filters_types_validation(self):
        """Test validation of 'types' filter specifically."""
        mock_profiles = []

        # Test with string instead of list
        invalid_filters = {"severity": "critical"}
        with pytest.raises(InvalidObjectError) as exc_info:
            self.client._apply_filters(mock_profiles, invalid_filters)

        error = exc_info.value
        assert isinstance(error, InvalidObjectError)

    def test_list_response_invalid_format(self):
        """Test that InvalidObjectError is raised when the response is not a dictionary."""
        self.mock_scm.get.return_value = ["not", "a", "dictionary"]  # noqa

        with pytest.raises(InvalidObjectError) as exc_info:
            self.client.list(folder="Shared")

        assert exc_info.value.error_code == "E003"
        assert exc_info.value.http_status_code == 500
        assert "HTTP error: 500 - API error: E003" in str(exc_info.value)

    def test_list_response_invalid_data_field_missing(self):
        """Test that InvalidObjectError is raised when API returns response with missing data field."""
        self.mock_scm.get.return_value = {"wrong_field": "value"}  # noqa

        with pytest.raises(InvalidObjectError) as exc_info:
            self.client.list(folder="Shared")

        error = exc_info.value
        assert isinstance(error, InvalidObjectError)
        assert error.error_code == "E003"
        assert error.http_status_code == 500
        assert "HTTP error: 500 - API error: E003" in str(error)

    def test_list_response_invalid_data_field_type(self):
        """Test that InvalidObjectError is raised when API returns non-list data field."""
        self.mock_scm.get.return_value = {"data": "not a list"}  # noqa

        with pytest.raises(InvalidObjectError) as exc_info:
            self.client.list(folder="Shared")

        error = exc_info.value
        assert isinstance(error, InvalidObjectError)
        assert error.error_code == "E003"
        assert error.http_status_code == 500

    def test_list_http_error_no_content(self):
        """Test handling of HTTPError without content."""
        mock_response = MagicMock()
        mock_response.content = None
        mock_response.status_code = 500

        mock_http_error = HTTPError(response=mock_response)
        self.mock_scm.get.side_effect = mock_http_error  # noqa

        with pytest.raises(HTTPError):
            self.client.list(folder="Shared")

    def test_list_filters_invalid_rules(self):
        """Test that _apply_filters raises InvalidObjectError for invalid rules filter."""
        mock_profiles = []
        invalid_filters = {"rules": "not a list"}

        with pytest.raises(InvalidObjectError) as exc_info:
            self.client._apply_filters(mock_profiles, invalid_filters)

        error_msg = str(exc_info.value)
        assert "HTTP error: 400 - API error: E003" in error_msg

    def test_filter_by_threat_exceptions(self):
        """Test filtering profiles by threat exception attributes."""
        mock_response = {
            "data": [
                VulnerabilityProfileResponseFactory(
                    name="profile1",
                    threat_exception=[
                        VulnerabilityProfileThreatExceptionModelFactory(name="threat1")
                    ],
                ).model_dump(),
                VulnerabilityProfileResponseFactory(
                    name="profile2",
                    threat_exception=[
                        VulnerabilityProfileThreatExceptionModelFactory(name="threat2")
                    ],
                ).model_dump(),
            ]
        }

        self.mock_scm.get.return_value = mock_response  # noqa

        filtered_objects = self.client.list(
            folder="Shared",
            rules__name=["threat1"],  # Filter on the rules' name field
        )
        assert len(filtered_objects) == 2
        assert filtered_objects[0].threat_exception[0].name == "threat1"


class TestVulnerabilityProtectionProfileCreate(TestVulnerabilityProtectionProfileBase):
    """Tests for creating Vulnerability Protection Profile objects."""

    def test_create_valid_object(self):
        """Test creating an object with valid data."""
        test_object = VulnerabilityProfileCreateApiFactory.build()
        mock_response = VulnerabilityProfileResponseFactory.from_request(test_object)

        self.mock_scm.post.return_value = mock_response.model_dump()  # noqa
        created_object = self.client.create(test_object.model_dump())

        self.mock_scm.post.assert_called_once_with(  # noqa
            "/config/security/v1/vulnerability-protection-profiles",
            json=test_object.model_dump(),
        )
        assert isinstance(created_object, VulnerabilityProfileResponseModel)
        assert created_object.name == test_object.name

    def test_create_http_error_no_content(self):
        """Test creation with HTTPError without content."""
        mock_response = MagicMock()
        mock_response.content = None
        mock_response.status_code = 500

        mock_http_error = HTTPError(response=mock_response)
        self.mock_scm.post.side_effect = mock_http_error  # noqa

        with pytest.raises(HTTPError):
            self.client.create({"name": "test", "folder": "Shared", "rules": []})

    def test_create_with_rules(self):
        """Test creating profile with specific rules configuration."""
        test_object = VulnerabilityProfileCreateApiFactory.build(
            rules=[
                VulnerabilityProfileRuleModelFactory(
                    severity=[VulnerabilityProfileSeverity.critical],
                    category=VulnerabilityProfileCategory.any,
                    host=VulnerabilityProfileHost.any,
                    packet_capture=VulnerabilityProfilePacketCapture.single_packet,
                )
            ]
        )

        mock_response = VulnerabilityProfileResponseFactory.from_request(test_object)
        self.mock_scm.post.return_value = mock_response.model_dump()  # noqa

        created_object = self.client.create(test_object.model_dump())

        assert isinstance(created_object, VulnerabilityProfileResponseModel)
        assert len(created_object.rules) == 1
        assert created_object.rules[0].severity == [
            VulnerabilityProfileSeverity.critical
        ]
        assert created_object.rules[0].category == VulnerabilityProfileCategory.any

    def test_apply_filters_invalid_rules(self):
        """Test that _apply_filters raises InvalidObjectError for invalid rules filter."""
        mock_profiles = []
        invalid_filters = {"rules": "not a list"}

        with pytest.raises(InvalidObjectError) as exc_info:
            self.client._apply_filters(mock_profiles, invalid_filters)

        assert "HTTP error: 400 - API error: E003" in str(exc_info.value)

    def test_create_with_name(self):
        """Test creating profile with custom threat name."""
        test_object = VulnerabilityProfileCreateApiFactory.build(
            threat_exception=[
                VulnerabilityProfileThreatExceptionModelFactory.build(
                    name="custom-threat-name"
                )
            ]
        )

        mock_response = VulnerabilityProfileResponseFactory.from_request(test_object)
        self.mock_scm.post.return_value = mock_response.model_dump()  # noqa

        created_object = self.client.create(test_object.model_dump())

        assert isinstance(created_object, VulnerabilityProfileResponseModel)
        assert len(created_object.threat_exception) == 1
        assert created_object.threat_exception[0].name == "custom-threat-name"

    def test_create_with_threat_exceptions(self):
        """Test creating profile with threat exceptions."""
        test_object = VulnerabilityProfileCreateApiFactory.build(
            threat_exception=[
                VulnerabilityProfileThreatExceptionModelFactory(
                    name="custom-threat",
                    packet_capture=VulnerabilityProfilePacketCapture.extended_capture,
                )
            ]
        )

        mock_response = VulnerabilityProfileResponseFactory.from_request(test_object)
        self.mock_scm.post.return_value = mock_response.model_dump()  # noqa

        created_object = self.client.create(test_object.model_dump())

        assert isinstance(created_object, VulnerabilityProfileResponseModel)
        assert len(created_object.threat_exception) == 1
        assert created_object.threat_exception[0].name == "custom-threat"
        assert (
            created_object.threat_exception[0].packet_capture
            == VulnerabilityProfilePacketCapture.extended_capture
        )

    def test_create_http_error_with_response(self):
        """Test that HTTPError with response content triggers proper error handling."""
        test_data = {
            "name": "test-profile",
            "folder": "Shared",
            "rules": [
                {
                    "name": "TestRule",
                    "severity": ["critical"],
                    "category": "any",
                    "host": "any",
                }
            ],
        }

        self.mock_scm.post.side_effect = raise_mock_http_error(  # noqa
            status_code=400,
            error_code="API_I00013",
            message="Create failed",
            error_type="Malformed Command",
        )

        with pytest.raises(MalformedCommandError) as exc_info:
            self.client.create(test_data)

        assert (
            "{'errorType': 'Malformed Command'} - HTTP error: 400 - API error: API_I00013"
            in str(exc_info.value)
        )

    def test_create_generic_exception_handling(self):
        """Test handling of a generic exception during create."""
        self.mock_scm.post.side_effect = Exception("Generic error")  # noqa

        with pytest.raises(Exception) as exc_info:
            self.client.create(
                {
                    "name": "test-profile",
                    "folder": "Shared",
                    "rules": [],
                }
            )
        assert str(exc_info.value) == "Generic error"

    def test_create_response_model(self):
        """Test that create method returns a VulnerabilityProfileResponseModel."""
        test_object = VulnerabilityProfileCreateApiFactory.build()
        mock_response = VulnerabilityProfileResponseFactory.from_request(test_object)

        self.mock_scm.post.return_value = mock_response.model_dump()  # noqa
        created_object = self.client.create(test_object.model_dump())

        assert isinstance(created_object, VulnerabilityProfileResponseModel)
        assert created_object.model_dump() == mock_response.model_dump()

    def test_create_with_multiple_threat_exceptions(self):
        """Test creating a profile with multiple threat exceptions."""
        test_object = VulnerabilityProfileCreateApiFactory.build(
            threat_exception=[
                VulnerabilityProfileThreatExceptionModelFactory(
                    name="exception1",
                ),
                VulnerabilityProfileThreatExceptionModelFactory(
                    name="exception2",
                ),
            ]
        )

        mock_response = VulnerabilityProfileResponseFactory.from_request(test_object)
        self.mock_scm.post.return_value = mock_response.model_dump()  # noqa

        created_object = self.client.create(test_object.model_dump())

        assert isinstance(created_object, VulnerabilityProfileResponseModel)
        assert len(created_object.threat_exception) == 2
        assert created_object.threat_exception[0].name == "exception1"
        assert created_object.threat_exception[1].name == "exception2"


class TestVulnerabilityProtectionProfileGet(TestVulnerabilityProtectionProfileBase):
    """Tests for retrieving a specific Vulnerability Protection Profile object."""

    def test_get_valid_object(self):
        """Test retrieving a specific object."""
        mock_response = VulnerabilityProfileResponseFactory.build()

        self.mock_scm.get.return_value = mock_response.model_dump()  # noqa
        retrieved_object = self.client.get(str(mock_response.id))

        self.mock_scm.get.assert_called_once_with(  # noqa
            f"/config/security/v1/vulnerability-protection-profiles/{mock_response.id}"
        )
        assert isinstance(retrieved_object, VulnerabilityProfileResponseModel)
        assert retrieved_object.name == mock_response.name

    def test_get_response_model(self):
        """Test that get method returns a VulnerabilityProfileResponseModel."""
        mock_response = VulnerabilityProfileResponseFactory.build()

        self.mock_scm.get.return_value = mock_response.model_dump()  # noqa
        retrieved_object = self.client.get(str(mock_response.id))

        assert isinstance(retrieved_object, VulnerabilityProfileResponseModel)
        assert retrieved_object.model_dump() == mock_response.model_dump()

    def test_get_object_not_present_error(self):
        """Test error handling when object is not present."""
        object_id = "123e4567-e89b-12d3-a456-426655440000"

        self.mock_scm.get.side_effect = raise_mock_http_error(  # noqa
            status_code=404,
            error_code="API_I00013",
            message="Object not found",
            error_type="Object Not Present",
        )

        with pytest.raises(ObjectNotPresentError) as exc_info:
            self.client.get(object_id)

        assert "Object Not Present" in str(exc_info.value)

    def test_get_generic_exception_handling(self):
        """Test generic exception handling in get method."""
        object_id = "123e4567-e89b-12d3-a456-426655440000"

        self.mock_scm.get.side_effect = Exception("Generic error")  # noqa

        with pytest.raises(Exception) as exc_info:
            self.client.get(object_id)

        assert str(exc_info.value) == "Generic error"

    def test_get_http_error_no_response_content(self):
        """Test get method when HTTP error has no response content."""
        object_id = "123e4567-e89b-12d3-a456-426655440000"

        mock_response = MagicMock()
        mock_response.content = None
        mock_response.status_code = 500

        mock_http_error = HTTPError(response=mock_response)
        self.mock_scm.get.side_effect = mock_http_error  # noqa

        with pytest.raises(HTTPError):
            self.client.get(object_id)

    def test_get_server_error(self):
        """Test handling of server errors during get method."""
        object_id = "123e4567-e89b-12d3-a456-426655440000"

        self.mock_scm.get.side_effect = raise_mock_http_error(  # noqa
            status_code=500,
            error_code="E003",
            message="An internal error occurred",
            error_type="Internal Error",
        )

        with pytest.raises(APIError) as exc_info:
            self.client.get(object_id)

        error_msg = str(exc_info.value)
        assert (
            "{'errorType': 'Internal Error'} - HTTP error: 500 - API error: E003"
            in error_msg
        )


class TestVulnerabilityProtectionProfileUpdate(TestVulnerabilityProtectionProfileBase):
    """Tests for updating Vulnerability Protection Profile objects."""

    def test_update_valid_object(self):
        """Test updating an object with valid data."""
        update_data = VulnerabilityProfileUpdateApiFactory.with_empty_rules(
            id="123e4567-e89b-12d3-a456-426655440000",
            name="updated-profile",
            description="Updated vulnerability protection profile",
        )
        input_data = update_data.model_dump()

        # Create mock response
        mock_response = VulnerabilityProfileResponseFactory.from_request(update_data)
        self.mock_scm.put.return_value = mock_response.model_dump()  # noqa

        # Perform update
        updated_object = self.client.update(input_data)

        # Assert the put method was called with correct parameters
        self.mock_scm.put.assert_called_once_with(  # noqa
            f"/config/security/v1/vulnerability-protection-profiles/{update_data.id}",
            json=input_data,
        )

        assert isinstance(updated_object, VulnerabilityProfileResponseModel)
        assert updated_object.id == mock_response.id
        assert updated_object.name == mock_response.name
        assert updated_object.description == mock_response.description

    def test_update_response_model(self):
        """Test that update method returns a VulnerabilityProfileResponseModel."""
        update_data = VulnerabilityProfileUpdateApiFactory.with_empty_rules(
            id="123e4567-e89b-12d3-a456-426655440000",
            name="updated-profile",
        )
        mock_response = VulnerabilityProfileResponseFactory.from_request(update_data)

        self.mock_scm.put.return_value = mock_response.model_dump()  # noqa
        updated_object = self.client.update(update_data.model_dump())

        assert isinstance(updated_object, VulnerabilityProfileResponseModel)
        assert updated_object.model_dump() == mock_response.model_dump()

    def test_update_malformed_command_error(self):
        """Test error handling when update fails due to malformed command."""
        update_data = VulnerabilityProfileUpdateApiFactory.with_empty_rules(
            id="123e4567-e89b-12d3-a456-426655440000",
            name="test-profile",
        )
        input_data = update_data.model_dump()

        self.mock_scm.put.side_effect = raise_mock_http_error(  # noqa
            status_code=400,
            error_code="API_I00013",
            message="Update failed",
            error_type="Malformed Command",
        )

        with pytest.raises(MalformedCommandError) as exc_info:
            self.client.update(input_data)

        assert (
            "{'errorType': 'Malformed Command'} - HTTP error: 400 - API error: API_I00013"
            in str(exc_info.value)
        )

    def test_update_object_not_present_error(self):
        """Test error handling when the object to update is not present."""
        update_data = VulnerabilityProfileUpdateApiFactory.with_empty_rules(
            id="123e4567-e89b-12d3-a456-426655440000",
            name="test-profile",
        )
        input_data = update_data.model_dump()

        self.mock_scm.put.side_effect = raise_mock_http_error(  # noqa
            status_code=404,
            error_code="API_I00013",
            message="Object not found",
            error_type="Object Not Present",
        )

        with pytest.raises(ObjectNotPresentError) as exc_info:
            self.client.update(input_data)

        assert (
            "{'errorType': 'Object Not Present'} - HTTP error: 404 - API error: API_I00013"
            in str(exc_info.value)
        )

    def test_update_http_error_no_response_content(self):
        """Test update method when HTTP error has no response content."""
        mock_response = MagicMock()
        mock_response.content = None
        mock_response.status_code = 500

        mock_http_error = HTTPError(response=mock_response)
        self.mock_scm.put.side_effect = mock_http_error  # noqa

        with pytest.raises(HTTPError):
            self.client.update(
                {
                    "id": "123e4567-e89b-12d3-a456-426655440000",
                    "name": "test-profile",
                    "rules": [],
                }
            )

    def test_update_generic_exception_handling(self):
        """Test handling of a generic exception during update."""
        self.mock_scm.put.side_effect = Exception("Generic error")  # noqa

        with pytest.raises(Exception) as exc_info:
            self.client.update(
                {
                    "id": "123e4567-e89b-12d3-a456-426655440000",
                    "name": "test-profile",
                    "rules": [],
                }
            )
        assert str(exc_info.value) == "Generic error"

    def test_update_server_error(self):
        """Test handling of server errors during update."""
        update_data = VulnerabilityProfileUpdateApiFactory.with_empty_rules(
            id="123e4567-e89b-12d3-a456-426655440000",
            name="test-profile",
        )
        input_data = update_data.model_dump()

        self.mock_scm.put.side_effect = raise_mock_http_error(  # noqa
            status_code=500,
            error_code="E003",
            message="An internal error occurred",
            error_type="Internal Error",
        )

        with pytest.raises(APIError) as exc_info:
            self.client.update(input_data)

        assert (
            "{'errorType': 'Internal Error'} - HTTP error: 500 - API error: E003"
            in str(exc_info.value)
        )

    def test_update_with_modified_threat_exceptions(self):
        """Test updating a profile's threat exceptions."""
        update_data = VulnerabilityProfileUpdateApiFactory.build(
            id="123e4567-e89b-12d3-a456-426655440000",
            name="updated-profile",
            threat_exception=[
                VulnerabilityProfileThreatExceptionModelFactory(
                    name="updated-exception",
                    packet_capture=VulnerabilityProfilePacketCapture.disable,
                )
            ],
        )

        mock_response = VulnerabilityProfileResponseFactory.from_request(update_data)
        self.mock_scm.put.return_value = mock_response.model_dump()  # noqa

        updated_object = self.client.update(update_data.model_dump())

        assert isinstance(updated_object, VulnerabilityProfileResponseModel)
        assert len(updated_object.threat_exception) == 1
        assert updated_object.threat_exception[0].name == "updated-exception"


class TestVulnerabilityProtectionProfileDelete(TestVulnerabilityProtectionProfileBase):
    """Tests for deleting Vulnerability Protection Profile objects."""

    def test_delete_success(self):
        """Test successful deletion of an object."""
        object_id = "123e4567-e89b-12d3-a456-426655440000"

        self.mock_scm.delete.return_value = None  # noqa
        self.client.delete(object_id)

        self.mock_scm.delete.assert_called_once_with(  # noqa
            f"/config/security/v1/vulnerability-protection-profiles/{object_id}"
        )

    def test_delete_referenced_object(self):
        """Test deleting an object that is referenced."""
        object_id = "123e4567-e89b-12d3-a456-426655440000"

        self.mock_scm.delete.side_effect = raise_mock_http_error(  # noqa
            status_code=409,
            error_code="E009",
            message="Reference not zero",
            error_type="Reference Not Zero",
        )

        with pytest.raises(ReferenceNotZeroError) as exc_info:
            self.client.delete(object_id)

        assert "Reference Not Zero" in str(exc_info.value)

    def test_delete_object_not_present_error(self):
        """Test error handling when the object to delete is not present."""
        object_id = "123e4567-e89b-12d3-a456-426655440000"

        self.mock_scm.delete.side_effect = raise_mock_http_error(  # noqa
            status_code=404,
            error_code="API_I00013",
            message="Object not found",
            error_type="Object Not Present",
        )

        with pytest.raises(ObjectNotPresentError) as exc_info:
            self.client.delete(object_id)

        error_message = str(exc_info.value)
        assert "{'errorType': 'Object Not Present'}" in error_message
        assert "HTTP error: 404" in error_message
        assert "API error: API_I00013" in error_message

    def test_delete_http_error_no_response_content(self):
        """Test delete method when HTTP error has no response content."""
        object_id = "123e4567-e89b-12d3-a456-426655440000"

        mock_response = MagicMock()
        mock_response.content = None
        mock_response.status_code = 500

        mock_http_error = HTTPError(response=mock_response)
        self.mock_scm.delete.side_effect = mock_http_error  # noqa

        with pytest.raises(HTTPError):
            self.client.delete(object_id)

    def test_delete_generic_exception_handling(self):
        """Test handling of a generic exception during delete."""
        self.mock_scm.delete.side_effect = Exception("Generic error")  # noqa

        with pytest.raises(Exception) as exc_info:
            self.client.delete("abcdefg")

        assert str(exc_info.value) == "Generic error"

    def test_delete_server_error(self):
        """Test handling of server errors during delete."""
        object_id = "123e4567-e89b-12d3-a456-426655440000"

        self.mock_scm.delete.side_effect = raise_mock_http_error(  # noqa
            status_code=500,
            error_code="E003",
            message="An internal error occurred",
            error_type="Internal Error",
        )

        with pytest.raises(APIError) as exc_info:
            self.client.delete(object_id)

        error_message = str(exc_info.value)
        assert "{'errorType': 'Internal Error'}" in error_message
        assert "HTTP error: 500" in error_message
        assert "API error: E003" in error_message


class TestVulnerabilityProtectionProfileFetch(TestVulnerabilityProtectionProfileBase):
    """Tests for fetching Vulnerability Protection Profile objects by name."""

    def test_fetch_valid_object(self):
        """Test retrieving an object by its name using the `fetch` method."""
        mock_response_model = VulnerabilityProfileResponseFactory.build()
        mock_response_data = mock_response_model.model_dump()

        self.mock_scm.get.return_value = mock_response_data  # noqa

        fetched_object = self.client.fetch(
            name=mock_response_model.name,
            folder=mock_response_model.folder,
        )

        self.mock_scm.get.assert_called_once_with(  # noqa
            "/config/security/v1/vulnerability-protection-profiles",
            params={
                "folder": mock_response_model.folder,
                "name": mock_response_model.name,
            },
        )

        assert isinstance(fetched_object, dict)
        assert fetched_object["id"] == mock_response_model.id
        assert fetched_object["name"] == mock_response_model.name
        assert fetched_object["description"] == mock_response_model.description

    def test_fetch_object_not_present_error(self):
        """Test fetching an object that does not exist."""
        self.mock_scm.get.side_effect = raise_mock_http_error(  # noqa
            status_code=404,
            error_code="API_I00013",
            message="Object not found",
            error_type="Object Not Present",
        )

        with pytest.raises(ObjectNotPresentError) as exc_info:
            self.client.fetch(name="nonexistent", folder="Shared")

        error_msg = str(exc_info.value)
        assert "{'errorType': 'Object Not Present'}" in error_msg
        assert "HTTP error: 404" in error_msg
        assert "API error: API_I00013" in error_msg

    def test_fetch_empty_name_error(self):
        """Test fetching with an empty name parameter."""
        with pytest.raises(MissingQueryParameterError) as exc_info:
            self.client.fetch(name="", folder="Shared")

        error_msg = str(exc_info.value)
        assert '"name" is not allowed to be empty' in error_msg
        assert "HTTP error: 400" in error_msg
        assert "API error: E003" in error_msg

    def test_fetch_empty_container_error(self):
        """Test fetching with an empty folder parameter."""
        with pytest.raises(MissingQueryParameterError) as exc_info:
            self.client.fetch(name="test", folder="")

        error_msg = str(exc_info.value)
        assert '"folder" is not allowed to be empty' in error_msg
        assert "HTTP error: 400" in error_msg
        assert "API error: E003" in error_msg

    def test_fetch_no_container_provided_error(self):
        """Test that InvalidObjectError is raised when no container parameter is provided."""
        with pytest.raises(InvalidObjectError) as exc_info:
            self.client.fetch(name="test-profile")

        error_msg = str(exc_info.value)
        assert "HTTP error: 400 - API error: E003" in error_msg

    def test_fetch_multiple_containers_provided_error(self):
        """Test that InvalidObjectError is raised when multiple container parameters are provided."""
        with pytest.raises(InvalidObjectError) as exc_info:
            self.client.fetch(
                name="test-profile",
                folder="Shared",
                snippet="TestSnippet",
            )

        error_msg = str(exc_info.value)
        assert "HTTP error: 400 - API error: E003" in error_msg

    def test_fetch_http_error_no_response_content(self):
        """Test that an HTTPError without response content in fetch() re-raises the exception."""
        mock_response = MagicMock()
        mock_response.content = None
        mock_response.status_code = 500

        mock_http_error = HTTPError(response=mock_response)
        self.mock_scm.get.side_effect = mock_http_error  # noqa

        with pytest.raises(HTTPError):
            self.client.fetch(name="test-profile", folder="Shared")

    def test_fetch_server_error(self):
        """Test handling of server errors during fetch."""
        self.mock_scm.get.side_effect = raise_mock_http_error(  # noqa
            status_code=500,
            error_code="E003",
            message="An internal error occurred",
            error_type="Internal Error",
        )

        with pytest.raises(APIError) as exc_info:
            self.client.fetch(name="test", folder="Shared")

        error_msg = str(exc_info.value)
        assert "{'errorType': 'Internal Error'}" in error_msg
        assert "HTTP error: 500" in error_msg
        assert "API error: E003" in error_msg

    def test_fetch_response_model_dump(self):
        """Test that fetch method returns a dict from VulnerabilityProfileResponseModel."""
        mock_response_model = VulnerabilityProfileResponseFactory.build()
        mock_response_data = mock_response_model.model_dump()

        self.mock_scm.get.return_value = mock_response_data  # noqa

        fetched_object = self.client.fetch(
            name=mock_response_model.name,
            folder=mock_response_model.folder,
        )

        assert isinstance(fetched_object, dict)
        assert fetched_object == mock_response_model.model_dump(
            exclude_unset=True,
            exclude_none=True,
        )

    def test_fetch_missing_id_field_error(self):
        """Test that InvalidObjectError is raised when the response is missing 'id' field."""
        mock_response = {
            "name": "test-profile",
            "folder": "Shared",
            "rules": [],
        }

        self.mock_scm.get.return_value = mock_response  # noqa

        with pytest.raises(InvalidObjectError) as exc_info:
            self.client.fetch(name="test-profile", folder="Shared")

        error_msg = str(exc_info.value)
        assert "HTTP error: 500 - API error: E003" in error_msg
        assert exc_info.value.error_code == "E003"
        assert exc_info.value.http_status_code == 500

    def test_fetch_invalid_response_type_error(self):
        """Test that InvalidObjectError is raised when the response is not a dictionary."""
        self.mock_scm.get.return_value = ["not", "a", "dictionary"]  # noqa

        with pytest.raises(InvalidObjectError) as exc_info:
            self.client.fetch(name="test123", folder="Shared")

        error_msg = str(exc_info.value)
        assert "HTTP error: 500 - API error: E003" in error_msg
        assert exc_info.value.error_code == "E003"
        assert exc_info.value.http_status_code == 500


# -------------------- End of Test Classes --------------------
