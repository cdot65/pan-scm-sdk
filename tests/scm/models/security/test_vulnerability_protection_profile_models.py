# tests/scm/models/security/test_vulnerability_protection_profile_models.py

import unittest.mock
from uuid import UUID

# External libraries
import pytest
from pydantic import ValidationError

# Local SDK imports
from scm.models.security.vulnerability_protection_profiles import (
    VulnerabilityProfileCreateModel,
    VulnerabilityProfileUpdateModel,
    VulnerabilityProfileResponseModel,
    VulnerabilityProfileSeverity,
    VulnerabilityProfileHost,
    VulnerabilityProfileActionRequest,
    VulnerabilityProfileActionResponse,
)
from tests.factories import (
    VulnerabilityProfileCreateModelFactory,
    VulnerabilityProfileUpdateModelFactory,
)


# -------------------- Test Classes for Pydantic Models --------------------


class TestVulnerabilityProfileActionRequest:
    """Tests for VulnerabilityProfileActionRequest validation."""

    def test_action_request_valid_string(self):
        """Test validation with valid string action."""
        model = VulnerabilityProfileActionRequest.model_validate("allow")
        assert model.root == {"allow": {}}
        assert model.get_action_name() == "allow"

    def test_action_request_valid_block_ip(self):
        """Test validation with valid block_ip action."""
        data = {
            "block_ip": {
                "track_by": "source",
                "duration": 300,
            }
        }
        model = VulnerabilityProfileActionRequest.model_validate(data)
        assert model.root["block_ip"]["track_by"] == "source"
        assert model.root["block_ip"]["duration"] == 300

    def test_action_request_invalid_action(self):
        """Test validation with invalid action."""
        with pytest.raises(ValueError) as exc_info:
            VulnerabilityProfileActionRequest.model_validate("invalid_action")
        assert "Exactly one action must be provided in 'action' field." in str(
            exc_info.value
        )

    def test_action_request_multiple_actions(self):
        """Test validation when multiple actions are provided."""
        data = {"allow": {}, "block_ip": {"track_by": "source", "duration": 300}}
        with pytest.raises(ValueError) as exc_info:
            VulnerabilityProfileActionRequest.model_validate(data)
        assert "Exactly one action must be provided in 'action' field." in str(
            exc_info.value
        )

    def test_action_request_invalid_block_ip_params(self):
        """Test validation with invalid block_ip parameters."""
        data = {"block_ip": {"track_by": "invalid", "duration": 0}}
        with pytest.raises(ValueError) as exc_info:
            VulnerabilityProfileActionRequest.model_validate(data)
        assert "Invalid 'block_ip' action" in str(exc_info.value)

    def test_action_request_invalid_block_ip_action(self):
        """Test validation when block_ip action has invalid parameters causing exception."""
        data = {"block_ip": {"track_by": None, "duration": "invalid"}}
        with pytest.raises(ValueError) as exc_info:
            VulnerabilityProfileActionRequest.model_validate(data)
        assert "Invalid 'block_ip' action" in str(exc_info.value)
        assert "1 validation error for VulnerabilityProfileActionRequest" in str(
            exc_info.value
        )

    def test_action_request_invalid_format(self):
        """Test validation with invalid action format (not a string or dict)."""
        with pytest.raises(ValueError) as exc_info:
            VulnerabilityProfileActionRequest.model_validate(123)
        assert "Invalid action format; must be a string or dict." in str(exc_info.value)

    def test_action_request_block_ip_not_dict(self):
        """Test validation when block_ip action value is not a dict."""
        data = {"block_ip": "invalid"}
        with pytest.raises(ValueError) as exc_info:
            VulnerabilityProfileActionRequest.model_validate(data)
        assert (
            "'block_ip' action must be a dict with 'track_by' and 'duration' fields."
            in str(exc_info.value)
        )

    def test_action_request_action_with_parameters(self):
        """Test validation when non-block_ip action has parameters."""
        data = {"allow": {"unexpected": "parameter"}}
        with pytest.raises(ValueError) as exc_info:
            VulnerabilityProfileActionRequest.model_validate(data)
        assert "Action 'allow' does not take any parameters." in str(exc_info.value)

    def test_action_request_get_action_name_unknown(self):
        """Test get_action_name returns 'unknown' when root is None."""
        # Create a valid instance
        model = VulnerabilityProfileActionRequest.model_validate("allow")
        # Mock the root attribute to be None
        with unittest.mock.patch.object(model, "root", None):
            assert model.get_action_name() == "unknown"


class TestVulnerabilityProfileActionResponse:
    """Tests for VulnerabilityProfileActionResponse validation."""

    def test_action_response_valid_string(self):
        """Test validation with valid string action."""
        model = VulnerabilityProfileActionResponse.model_validate("alert")
        assert model.root == {"alert": {}}
        assert model.get_action_name() == "alert"

    def test_action_response_valid_block_ip(self):
        """Test validation with valid block_ip action."""
        data = {
            "block_ip": {
                "track_by": "source-and-destination",
                "duration": 600,
            }
        }
        model = VulnerabilityProfileActionResponse.model_validate(data)
        assert model.root["block_ip"]["track_by"] == "source-and-destination"
        assert model.root["block_ip"]["duration"] == 600

    def test_action_response_invalid_block_ip_action(self):
        """Test validation when block_ip action has invalid parameters causing exception."""
        data = {"block_ip": {"track_by": None, "duration": "invalid"}}
        with pytest.raises(ValueError) as exc_info:
            VulnerabilityProfileActionResponse.model_validate(data)
        assert "Invalid 'block_ip' action" in str(exc_info.value)
        assert "1 validation error for VulnerabilityProfileActionResponse" in str(
            exc_info.value
        )

    def test_action_response_invalid_format(self):
        """Test validation with invalid action format (not a string or dict)."""
        with pytest.raises(ValueError) as exc_info:
            VulnerabilityProfileActionResponse.model_validate(456)
        assert "Invalid action format; must be a string or dict." in str(exc_info.value)

    def test_action_response_multiple_actions(self):
        """Test validation when multiple actions are provided."""
        data = {"drop": {}, "reset_client": {}}
        with pytest.raises(ValueError) as exc_info:
            VulnerabilityProfileActionResponse.model_validate(data)
        assert "At most one action must be provided in 'action' field." in str(
            exc_info.value
        )

    def test_action_response_block_ip_not_dict(self):
        """Test validation when block_ip action value is not a dict."""
        data = {"block_ip": "invalid"}
        with pytest.raises(ValueError) as exc_info:
            VulnerabilityProfileActionResponse.model_validate(data)
        assert (
            "'block_ip' action must be a dict with 'track_by' and 'duration' fields."
            in str(exc_info.value)
        )

    def test_action_response_action_with_parameters(self):
        """Test validation when non-block_ip action has parameters."""
        data = {"reset_server": {"unexpected": "parameter"}}
        with pytest.raises(ValueError) as exc_info:
            VulnerabilityProfileActionResponse.model_validate(data)
        assert "Action 'reset_server' does not take any parameters." in str(
            exc_info.value
        )

    def test_action_response_invalid_action_format(self):
        """Test validation when action format is invalid in empty dict."""
        data = {"unexpected_action": {}}
        with pytest.raises(ValueError) as exc_info:
            VulnerabilityProfileActionResponse.model_validate(data)
        assert "Invalid action format." in str(exc_info.value)

    def test_action_response_empty_dict(self):
        """Test validation with empty dict (no action specified)."""
        model = VulnerabilityProfileActionResponse.model_validate({})
        assert model.root == {}
        assert model.get_action_name() == "unknown"

    def test_action_response_get_action_name_unknown(self):
        """Test get_action_name returns 'unknown' when root is None."""
        # Create a valid instance
        model = VulnerabilityProfileActionResponse.model_validate("alert")
        # Mock the root attribute to be None
        with unittest.mock.patch.object(model, "root", None):
            assert model.get_action_name() == "unknown"


class TestVulnerabilityProfileCreateModel:
    """Tests for VulnerabilityProfileCreateModel validation."""

    def test_vulnerability_profile_create_model_valid(self):
        """Test validation with valid data."""
        data = VulnerabilityProfileCreateModelFactory.build_valid()
        model = VulnerabilityProfileCreateModel(**data)
        assert model.name == data["name"]
        assert model.folder == data["folder"]
        assert len(model.rules) == 1
        assert model.rules[0].severity == [VulnerabilityProfileSeverity.critical]

    def test_vulnerability_profile_create_model_invalid_name(self):
        """Test validation when an invalid name is provided."""
        data = VulnerabilityProfileCreateModelFactory.build_with_invalid_name()
        with pytest.raises(ValidationError) as exc_info:
            VulnerabilityProfileCreateModel(**data)
        assert "name\n  String should match pattern" in str(exc_info.value)

    def test_vulnerability_profile_create_model_multiple_containers(self):
        """Test validation when multiple containers are provided."""
        data = VulnerabilityProfileCreateModelFactory.build_with_multiple_containers()
        with pytest.raises(ValueError) as exc_info:
            VulnerabilityProfileCreateModel(**data)
        assert (
            "Exactly one of 'folder', 'snippet', or 'device' must be provided."
            in str(exc_info.value)
        )

    def test_vulnerability_profile_create_model_invalid_rules(self):
        """Test validation with invalid rules data."""
        data = VulnerabilityProfileCreateModelFactory.build_with_invalid_rules()
        with pytest.raises(ValidationError) as exc_info:
            VulnerabilityProfileCreateModel(**data)
        assert (
            "3 validation errors for VulnerabilityProfileCreateModel\nrules.0.severity.0\n  Input should be 'critical', 'high', 'medium', 'low', 'informational' or 'any'"
            in str(exc_info.value)
        )


class TestVulnerabilityProfileUpdateModel:
    """Tests for VulnerabilityProfileUpdateModel validation."""

    def test_vulnerability_profile_update_model_valid(self):
        """Test validation with valid update data."""
        data = VulnerabilityProfileUpdateModelFactory.build_valid()
        model = VulnerabilityProfileUpdateModel(**data)
        assert model.name == "valid-profile-name"
        assert len(model.rules) == 1
        assert model.rules[0].host == VulnerabilityProfileHost.any

    def test_vulnerability_profile_update_model_invalid_fields(self):
        """Test validation with multiple invalid fields."""
        data = VulnerabilityProfileUpdateModelFactory.build_with_invalid_fields()
        with pytest.raises(ValidationError) as exc_info:
            VulnerabilityProfileUpdateModel(**data)
        error_msg = str(exc_info.value)
        assert "validation errors for VulnerabilityProfileUpdateModel" in error_msg

    def test_vulnerability_profile_update_model_minimal_update(self):
        """Test validation with minimal valid update fields."""
        data = VulnerabilityProfileUpdateModelFactory.build_minimal_update()
        model = VulnerabilityProfileUpdateModel(**data)
        assert model.description == "Updated description"

    def test_vulnerability_profile_update_model_empty_rules(self):
        """Test update with empty rules list."""
        data = VulnerabilityProfileUpdateModelFactory.build_minimal_update()
        data["rules"] = []
        model = VulnerabilityProfileUpdateModel(**data)
        assert model.rules == []


class TestVulnerabilityProfileResponseModel:
    """Tests for VulnerabilityProfileResponseModel validation."""

    def test_vulnerability_profile_response_model_valid(self):
        """Test validation with valid response data."""
        data = VulnerabilityProfileCreateModelFactory.build_valid()
        data["id"] = UUID("00000000-0000-0000-0000-000000000000")
        model = VulnerabilityProfileResponseModel(**data)
        assert isinstance(model.id, UUID)
        assert model.name.startswith("valid-profile-name")
        assert model.folder == "Shared"
        assert len(model.rules) > 0


# -------------------- End of Test Classes --------------------
